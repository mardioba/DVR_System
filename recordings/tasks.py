from celery import shared_task
from django.utils import timezone
from django.conf import settings
from datetime import datetime, timedelta
import os
import cv2
import ffmpeg
import threading
import time
import logging
import subprocess

from .models import Recording, RecordingSettings, MotionEvent
from cameras.models import Camera
from .utils import convert_recording, batch_convert_recordings, cleanup_converted_files

logger = logging.getLogger(__name__)


@shared_task
def start_motion_recording(camera_id):
    """Inicia grava√ß√£o por detec√ß√£o de movimento"""
    try:
        camera = Camera.objects.get(id=camera_id)
        
        # Verificar se a c√¢mera est√° ativa e tem grava√ß√£o habilitada
        if not camera.is_active or not camera.recording_enabled:
            print(f"‚ùå C√¢mera {camera.name} n√£o est√° ativa ou grava√ß√£o desabilitada")
            return False
        
        # Obter configura√ß√µes da c√¢mera
        try:
            camera_settings = camera.settings
        except:
            camera_settings = None
        
        # Configura√ß√µes padr√£o se n√£o existir
        recording_duration = getattr(camera_settings, 'recording_duration', 30)
        frame_rate = getattr(camera_settings, 'frame_rate', 15)
        
        # Criar estrutura de diret√≥rios
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"motion_{timestamp}.mp4"
        
        # Usar estrutura: recordings/videos/{camera_id}/{filename}
        camera_dir = os.path.join(settings.DVR_SETTINGS['RECORDINGS_PATH'], 'videos', str(camera.id))
        os.makedirs(camera_dir, exist_ok=True)
        
        filepath = os.path.join(camera_dir, filename)
        
        # Configurar grava√ß√£o com FFmpeg
        stream_url = camera.get_stream_url()
        
        print(f"üé¨ Iniciando grava√ß√£o por movimento: {filename}")
        print(f"üìÅ Caminho: {filepath}")
        print(f"üîó Stream: {stream_url}")
        print(f"‚è±Ô∏è Dura√ß√£o: {recording_duration}s")
        
        try:
            # Usar subprocess diretamente para melhor controle
            import subprocess
            
            # Comando FFmpeg para grava√ß√£o com configura√ß√µes mais robustas
            cmd = [
                'ffmpeg',
                '-i', stream_url,
                '-c:v', 'libx264',  # Usar H.264 diretamente
                '-c:a', 'aac',
                '-r', str(frame_rate),
                '-preset', 'ultrafast',  # Codifica√ß√£o mais r√°pida
                '-crf', '25',  # Qualidade um pouco menor para estabilidade
                '-f', 'mp4',
                '-t', str(recording_duration),
                '-avoid_negative_ts', 'make_zero',  # Evitar timestamps negativos
                '-fflags', '+genpts',  # Gerar timestamps
                '-movflags', '+faststart',  # Otimizar para streaming
                '-y',  # Sobrescrever arquivo
                filepath
            ]
            
            # Executar grava√ß√£o com timeout maior
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=recording_duration + 30  # Timeout maior que a dura√ß√£o
            )
            
            # Verificar se o arquivo foi criado e tem tamanho adequado
            if os.path.exists(filepath):
                file_size = os.path.getsize(filepath)
                print(f"üìä Arquivo criado: {file_size} bytes")
                
                # Verificar se o arquivo tem tamanho m√≠nimo (pelo menos 1KB)
                if file_size > 1024:
                    print(f"‚úÖ Grava√ß√£o bem-sucedida: {filename} ({file_size} bytes)")
                    
                    # Criar registro da grava√ß√£o
                    recording = Recording.objects.create(
                        camera=camera,
                        file_path=filepath,
                        file_name=filename,
                        file_size=file_size,
                        duration=recording_duration,
                        recording_type='motion',
                        motion_detected=True,
                        end_time=timezone.now()
                    )
                    
                    # Criar evento de movimento
                    MotionEvent.objects.create(
                        camera=camera,
                        recording=recording,
                        duration=recording_duration,
                        confidence=0.8,  # Valor padr√£o
                        area_affected=1000  # Valor padr√£o
                    )
                    
                    return True
                else:
                    print(f"‚ùå Arquivo muito pequeno: {file_size} bytes")
                    # Remover arquivo pequeno
                    try:
                        os.remove(filepath)
                    except:
                        pass
                    return False
            else:
                print(f"‚ùå Arquivo n√£o foi criado")
                if result.stderr:
                    print(f"Erro FFmpeg: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ Timeout na grava√ß√£o: {filename}")
            # Remover arquivo se foi criado
            try:
                if os.path.exists(filepath):
                    os.remove(filepath)
            except:
                pass
            return False
        except Exception as e:
            print(f"‚ùå Erro na grava√ß√£o: {filename} - {e}")
            # Remover arquivo se foi criado
            try:
                if os.path.exists(filepath):
                    os.remove(filepath)
            except:
                pass
            return False
            
    except Camera.DoesNotExist:
        print(f"‚ùå C√¢mera {camera_id} n√£o encontrada")
        return False
    except Exception as e:
        print(f"‚ùå Erro geral na grava√ß√£o por movimento: {e}")
        return False


@shared_task
def start_manual_recording(camera_id, duration=30):
    """Inicia grava√ß√£o manual"""
    try:
        camera = Camera.objects.get(id=camera_id)
        
        # Verificar se a c√¢mera est√° ativa
        if not camera.is_active:
            print(f"‚ùå C√¢mera {camera.name} n√£o est√° ativa")
            return False
        
        # Obter configura√ß√µes da c√¢mera
        try:
            camera_settings = camera.settings
            frame_rate = camera_settings.frame_rate
        except:
            frame_rate = 15
        
        # Criar estrutura de diret√≥rios
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"manual_{timestamp}.mp4"
        
        # Usar estrutura: recordings/videos/{camera_id}/{filename}
        camera_dir = os.path.join(settings.DVR_SETTINGS['RECORDINGS_PATH'], 'videos', str(camera.id))
        os.makedirs(camera_dir, exist_ok=True)
        
        filepath = os.path.join(camera_dir, filename)
        
        # Configurar grava√ß√£o com FFmpeg
        stream_url = camera.get_stream_url()
        
        print(f"üé¨ Iniciando grava√ß√£o manual: {filename}")
        print(f"üìÅ Caminho: {filepath}")
        print(f"üîó Stream: {stream_url}")
        print(f"‚è±Ô∏è Dura√ß√£o: {duration}s")
        
        try:
            # Usar subprocess diretamente para melhor controle
            import subprocess
            
            # Comando FFmpeg para grava√ß√£o com configura√ß√µes mais robustas
            cmd = [
                'ffmpeg',
                '-i', stream_url,
                '-c:v', 'libx264',  # Usar H.264 diretamente
                '-c:a', 'aac',
                '-r', str(frame_rate),
                '-preset', 'ultrafast',  # Codifica√ß√£o mais r√°pida
                '-crf', '25',  # Qualidade um pouco menor para estabilidade
                '-f', 'mp4',
                '-t', str(duration),
                '-avoid_negative_ts', 'make_zero',  # Evitar timestamps negativos
                '-fflags', '+genpts',  # Gerar timestamps
                '-movflags', '+faststart',  # Otimizar para streaming
                '-y',  # Sobrescrever arquivo
                filepath
            ]
            
            # Executar grava√ß√£o com timeout maior
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=duration + 30  # Timeout maior que a dura√ß√£o
            )
            
            # Verificar se o arquivo foi criado e tem tamanho adequado
            if os.path.exists(filepath):
                file_size = os.path.getsize(filepath)
                print(f"üìä Arquivo criado: {file_size} bytes")
                
                # Verificar se o arquivo tem tamanho m√≠nimo (pelo menos 1KB)
                if file_size > 1024:
                    print(f"‚úÖ Grava√ß√£o manual bem-sucedida: {filename} ({file_size} bytes)")
                    
                    # Criar registro da grava√ß√£o
                    Recording.objects.create(
                        camera=camera,
                        file_path=filepath,
                        file_name=filename,
                        file_size=file_size,
                        duration=duration,
                        recording_type='manual',
                        motion_detected=False,
                        end_time=timezone.now()
                    )
                    
                    return True
                else:
                    print(f"‚ùå Arquivo muito pequeno: {file_size} bytes")
                    # Remover arquivo pequeno
                    try:
                        os.remove(filepath)
                    except:
                        pass
                    return False
            else:
                print(f"‚ùå Arquivo n√£o foi criado")
                if result.stderr:
                    print(f"Erro FFmpeg: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ Timeout na grava√ß√£o manual: {filename}")
            # Remover arquivo se foi criado
            try:
                if os.path.exists(filepath):
                    os.remove(filepath)
            except:
                pass
            return False
        except Exception as e:
            print(f"‚ùå Erro na grava√ß√£o manual: {filename} - {e}")
            # Remover arquivo se foi criado
            try:
                if os.path.exists(filepath):
                    os.remove(filepath)
            except:
                pass
            return False
            
    except Camera.DoesNotExist:
        print(f"‚ùå C√¢mera {camera_id} n√£o encontrada")
        return False
    except Exception as e:
        print(f"‚ùå Erro geral na grava√ß√£o manual: {e}")
        return False


@shared_task
def convert_pending_recordings():
    """Converte grava√ß√µes pendentes automaticamente"""
    try:
        # Buscar grava√ß√µes pendentes de convers√£o
        pending_recordings = Recording.objects.filter(
            conversion_status='pending',
            is_deleted=False
        ).order_by('start_time')[:5]  # Limitar a 5 por vez
        
        if not pending_recordings:
            logger.info("Nenhuma grava√ß√£o pendente de convers√£o")
            return {"converted": 0, "errors": 0}
        
        logger.info(f"Iniciando convers√£o de {pending_recordings.count()} grava√ß√µes")
        
        converted_count = 0
        error_count = 0
        
        for recording in pending_recordings:
            try:
                result = convert_recording(str(recording.id), quality='medium')
                if result['success']:
                    converted_count += 1
                    logger.info(f"‚úÖ Grava√ß√£o convertida: {recording.file_name}")
                else:
                    error_count += 1
                    logger.error(f"‚ùå Erro na convers√£o: {recording.file_name} - {result['error']}")
            except Exception as e:
                error_count += 1
                logger.error(f"‚ùå Exce√ß√£o na convers√£o: {recording.file_name} - {e}")
        
        logger.info(f"Convers√£o conclu√≠da: {converted_count} sucessos, {error_count} erros")
        return {"converted": converted_count, "errors": error_count}
        
    except Exception as e:
        logger.error(f"Erro na tarefa de convers√£o: {e}")
        return {"converted": 0, "errors": 1}


@shared_task
def retry_failed_conversions():
    """Tenta converter novamente grava√ß√µes que falharam"""
    try:
        # Buscar grava√ß√µes com erro na convers√£o
        failed_recordings = Recording.objects.filter(
            conversion_status='failed',
            is_deleted=False
        ).order_by('-start_time')[:3]  # Limitar a 3 por vez
        
        if not failed_recordings:
            logger.info("Nenhuma grava√ß√£o com erro de convers√£o")
            return {"retried": 0, "errors": 0}
        
        logger.info(f"Tentando converter novamente {failed_recordings.count()} grava√ß√µes")
        
        retried_count = 0
        error_count = 0
        
        for recording in failed_recordings:
            try:
                # Resetar status para pending
                recording.conversion_status = 'pending'
                recording.conversion_error = None
                recording.save()
                
                result = convert_recording(str(recording.id), quality='medium')
                if result['success']:
                    retried_count += 1
                    logger.info(f"‚úÖ Grava√ß√£o reconvertida: {recording.file_name}")
                else:
                    error_count += 1
                    logger.error(f"‚ùå Erro na reconvers√£o: {recording.file_name} - {result['error']}")
            except Exception as e:
                error_count += 1
                logger.error(f"‚ùå Exce√ß√£o na reconvers√£o: {recording.file_name} - {e}")
        
        logger.info(f"Reconvers√£o conclu√≠da: {retried_count} sucessos, {error_count} erros")
        return {"retried": retried_count, "errors": error_count}
        
    except Exception as e:
        logger.error(f"Erro na tarefa de reconvers√£o: {e}")
        return {"retried": 0, "errors": 1}


@shared_task
def cleanup_old_recordings():
    """Remove grava√ß√µes antigas baseado nas configura√ß√µes"""
    try:
        settings_obj = RecordingSettings.get_settings()
        
        if not settings_obj.auto_delete_enabled:
            logger.info("Exclus√£o autom√°tica desabilitada")
            return {"deleted": 0}
        
        # Calcular data limite
        cutoff_date = timezone.now() - timedelta(days=settings_obj.max_recording_days)
        
        # Buscar grava√ß√µes antigas
        old_recordings = Recording.objects.filter(
            start_time__lt=cutoff_date,
            is_deleted=False
        )
        
        if not old_recordings:
            logger.info("Nenhuma grava√ß√£o antiga encontrada")
            return {"deleted": 0}
        
        logger.info(f"Removendo {old_recordings.count()} grava√ß√µes antigas")
        
        deleted_count = 0
        for recording in old_recordings:
            try:
                if recording.delete_file():
                    recording.is_deleted = True
                    recording.save()
                    deleted_count += 1
                    logger.info(f"üóëÔ∏è Grava√ß√£o removida: {recording.file_name}")
                else:
                    logger.error(f"‚ùå Erro ao remover arquivo: {recording.file_name}")
            except Exception as e:
                logger.error(f"‚ùå Exce√ß√£o ao remover: {recording.file_name} - {e}")
        
        logger.info(f"Limpeza conclu√≠da: {deleted_count} grava√ß√µes removidas")
        return {"deleted": deleted_count}
        
    except Exception as e:
        logger.error(f"Erro na tarefa de limpeza: {e}")
        return {"deleted": 0}


@shared_task
def cleanup_orphaned_files():
    """Remove arquivos convertidos √≥rf√£os"""
    try:
        cleaned_count = cleanup_converted_files()
        logger.info(f"Limpeza de arquivos √≥rf√£os: {cleaned_count} arquivos removidos")
        return {"cleaned": cleaned_count}
    except Exception as e:
        logger.error(f"Erro na limpeza de arquivos √≥rf√£os: {e}")
        return {"cleaned": 0}


@shared_task
def check_storage_usage():
    """Verifica o uso de armazenamento e alerta se necess√°rio"""
    try:
        settings_obj = RecordingSettings.get_settings()
        
        # Calcular uso atual
        total_size = Recording.objects.filter(is_deleted=False).aggregate(
            total_size=models.Sum('file_size')
        )['total_size'] or 0
        
        total_size_gb = total_size / (1024**3)
        limit_gb = settings_obj.storage_limit_gb
        
        usage_percent = (total_size_gb / limit_gb) * 100 if limit_gb > 0 else 0
        
        logger.info(f"Uso de armazenamento: {total_size_gb:.2f}GB / {limit_gb}GB ({usage_percent:.1f}%)")
        
        # Alertar se uso > 80%
        if usage_percent > 80:
            logger.warning(f"‚ö†Ô∏è Uso de armazenamento alto: {usage_percent:.1f}%")
            
            # Se > 90%, for√ßar limpeza
            if usage_percent > 90:
                logger.warning("üö® Uso cr√≠tico de armazenamento, for√ßando limpeza")
                cleanup_old_recordings.delay()
        
        return {
            "total_gb": total_size_gb,
            "limit_gb": limit_gb,
            "usage_percent": usage_percent
        }
        
    except Exception as e:
        logger.error(f"Erro na verifica√ß√£o de armazenamento: {e}")
        return {"error": str(e)}


@shared_task
def convert_specific_recording(recording_id, quality='medium'):
    """Converte uma grava√ß√£o espec√≠fica"""
    try:
        result = convert_recording(recording_id, quality)
        
        if result['success']:
            logger.info(f"‚úÖ Convers√£o conclu√≠da: {recording_id}")
        else:
            logger.error(f"‚ùå Erro na convers√£o: {recording_id} - {result['error']}")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Exce√ß√£o na convers√£o: {recording_id} - {e}")
        return {"success": False, "error": str(e)}


@shared_task
def batch_convert_specific_recordings(recording_ids, quality='medium'):
    """Converte m√∫ltiplas grava√ß√µes espec√≠ficas"""
    try:
        result = batch_convert_recordings(recording_ids, quality)
        
        logger.info(f"Convers√£o em lote: {result['success']} sucessos, {result['failed']} falhas")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Exce√ß√£o na convers√£o em lote: {e}")
        return {"success": 0, "failed": len(recording_ids), "errors": [str(e)]}


@shared_task
def update_camera_status():
    """Atualiza status das c√¢meras verificando conectividade"""
    try:
        cameras = Camera.objects.filter(is_active=True)
        
        for camera in cameras:
            try:
                # Tentar conectar com a c√¢mera
                cap = cv2.VideoCapture(camera.get_stream_url())
                
                if cap.isOpened():
                    camera.update_status('online')
                    cap.release()
                else:
                    camera.update_status('offline')
                    
            except Exception as e:
                camera.update_status('error')
                print(f"Erro ao verificar c√¢mera {camera.name}: {e}")
        
        return True
        
    except Exception as e:
        print(f"Erro na atualiza√ß√£o de status das c√¢meras: {e}")
        return False 