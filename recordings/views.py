from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse, FileResponse, Http404, StreamingHttpResponse
from django.core.paginator import Paginator
from django.db.models import Q, Sum
from django.utils import timezone
from django.conf import settings
import os
from datetime import datetime, timedelta
import mimetypes
import re

from .models import Recording, RecordingSettings, MotionEvent
from .forms import RecordingSettingsForm
from .utils import convert_recording, batch_convert_recordings, get_video_info, cleanup_converted_files
from cameras.models import Camera


@login_required
def recording_list(request):
    """Lista todas as grava√ß√µes"""
    recordings = Recording.objects.filter(is_deleted=False).order_by('-start_time')
    
    # Filtros
    camera_id = request.GET.get('camera')
    recording_type = request.GET.get('type')
    date_from = request.GET.get('date_from')
    date_to = request.GET.get('date_to')
    
    if camera_id:
        recordings = recordings.filter(camera_id=camera_id)
    
    if recording_type:
        recordings = recordings.filter(recording_type=recording_type)
    
    if date_from:
        try:
            date_from = datetime.strptime(date_from, '%Y-%m-%d')
            recordings = recordings.filter(start_time__date__gte=date_from.date())
        except ValueError:
            pass
    
    if date_to:
        try:
            date_to = datetime.strptime(date_to, '%Y-%m-%d')
            recordings = recordings.filter(start_time__date__lte=date_to.date())
        except ValueError:
            pass
    
    # Pagina√ß√£o
    paginator = Paginator(recordings, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    # Estat√≠sticas
    total_recordings = recordings.count()
    total_size = recordings.aggregate(total_size=Sum('file_size'))['total_size'] or 0
    total_size_gb = round(total_size / (1024**3), 2)
    
    context = {
        'page_obj': page_obj,
        'total_recordings': total_recordings,
        'total_size_gb': total_size_gb,
        'cameras': Camera.objects.filter(is_active=True),
    }
    
    return render(request, 'recordings/recording_list.html', context)


@login_required
def recording_detail(request, recording_id):
    """Detalhes de uma grava√ß√£o espec√≠fica"""
    recording = get_object_or_404(Recording, id=recording_id, is_deleted=False)
    
    context = {
        'recording': recording,
    }
    
    return render(request, 'recordings/recording_detail.html', context)


@login_required
def recording_play(request, recording_id):
    """Reproduzir uma grava√ß√£o"""
    recording = get_object_or_404(Recording, id=recording_id, is_deleted=False)
    
    if not os.path.exists(recording.file_path):
        messages.error(request, 'Arquivo de grava√ß√£o n√£o encontrado.')
        return redirect('recordings:recording_list')
    
    context = {
        'recording': recording,
    }
    
    return render(request, 'recordings/recording_play.html', context)


@login_required
def recording_download(request, recording_id):
    """Download de uma grava√ß√£o"""
    recording = get_object_or_404(Recording, id=recording_id, is_deleted=False)
    
    # Priorizar arquivo convertido se dispon√≠vel
    if recording.converted_file_exists:
        file_path = recording.converted_file_path
        file_name = recording.converted_file_name
    elif recording.file_exists:
        file_path = recording.file_path
        file_name = recording.file_name
    else:
        raise Http404("Arquivo n√£o encontrado")
    
    # Determinar tipo MIME
    content_type, _ = mimetypes.guess_type(file_path)
    if content_type is None:
        content_type = 'application/octet-stream'
    
    # Criar resposta de arquivo
    response = FileResponse(
        open(file_path, 'rb'),
        content_type=content_type
    )
    response['Content-Disposition'] = f'attachment; filename="{file_name}"'
    
    return response


@login_required
def recording_download_converted(request, recording_id):
    """Download espec√≠fico do arquivo convertido"""
    recording = get_object_or_404(Recording, id=recording_id, is_deleted=False)
    
    if not recording.converted_file_exists:
        raise Http404("Arquivo convertido n√£o encontrado")
    
    # Determinar tipo MIME
    content_type, _ = mimetypes.guess_type(recording.converted_file_path)
    if content_type is None:
        content_type = 'video/mp4'
    
    # Criar resposta de arquivo
    response = FileResponse(
        open(recording.converted_file_path, 'rb'),
        content_type=content_type
    )
    response['Content-Disposition'] = f'attachment; filename="{recording.converted_file_name}"'
    
    return response


@login_required
def recording_stream(request, recording_id):
    """Stream de uma grava√ß√£o para o player de v√≠deo"""
    recording = get_object_or_404(Recording, id=recording_id, is_deleted=False)
    
    # SEMPRE priorizar arquivo convertido para streaming (H.264 √© compat√≠vel com navegadores)
    if recording.converted_file_exists:
        file_path = recording.converted_file_path
        content_type = 'video/mp4'
        print(f"üé¨ Usando arquivo convertido H.264 para streaming: {recording.converted_file_name}")
    elif recording.file_exists:
        # Se n√£o h√° arquivo convertido, verificar se o original √© compat√≠vel
        video_info = get_video_info(recording.file_path)
        if video_info and video_info['video_codec'] in ['h264', 'h265', 'avc1']:
            file_path = recording.file_path
            content_type = 'video/mp4'
            print(f"üé¨ Usando arquivo original H.264 para streaming: {recording.file_name}")
        else:
            # Arquivo original n√£o √© compat√≠vel com navegadores
            codec = video_info.get('video_codec', 'desconhecido') if video_info else 'desconhecido'
            print(f"‚ùå Arquivo original usa codec {codec} - n√£o compat√≠vel com navegadores")
            raise Http404("V√≠deo n√£o compat√≠vel com navegadores web. Use o arquivo convertido H.264.")
    else:
        raise Http404("Arquivo n√£o encontrado")
    
    # Verificar se √© uma requisi√ß√£o de range (necess√°rio para streaming)
    range_header = request.META.get('HTTP_RANGE', '').strip()
    range_match = re.match(r'bytes=(\d+)-(\d*)', range_header)
    
    if range_match:
        # Requisi√ß√£o de range - implementar streaming parcial
        start = int(range_match.group(1))
        end = range_match.group(2)
        
        if end:
            end = int(end)
        else:
            end = os.path.getsize(file_path) - 1
        
        length = end - start + 1
        
        try:
            with open(file_path, 'rb') as f:
                f.seek(start)
                data = f.read(length)
            
            response = StreamingHttpResponse([data], status=206)
            response['Content-Range'] = f'bytes {start}-{end}/{os.path.getsize(file_path)}'
            response['Content-Length'] = str(length)
            response['Accept-Ranges'] = 'bytes'
            response['Content-Type'] = content_type
            response['Access-Control-Allow-Origin'] = '*'
            response['Access-Control-Allow-Methods'] = 'GET, HEAD'
            response['Access-Control-Allow-Headers'] = 'Range'
            
            return response
        except Exception as e:
            print(f"‚ùå Erro no streaming parcial: {e}")
            # Fallback para arquivo completo
            pass
    else:
        # Requisi√ß√£o normal - servir arquivo completo
        try:
            response = FileResponse(
                open(file_path, 'rb'),
                content_type=content_type
            )
            response['Content-Disposition'] = 'inline'
            response['Accept-Ranges'] = 'bytes'
            response['Access-Control-Allow-Origin'] = '*'
            response['Access-Control-Allow-Methods'] = 'GET, HEAD'
            response['Access-Control-Allow-Headers'] = 'Range'
            
            return response
        except Exception as e:
            print(f"‚ùå Erro ao servir arquivo: {e}")
            raise Http404("Erro ao acessar arquivo")


@login_required
def recording_static(request, recording_id):
    """Serve o v√≠deo como arquivo est√°tico (alternativa para compatibilidade)"""
    recording = get_object_or_404(Recording, id=recording_id, is_deleted=False)
    
    if not os.path.exists(recording.file_path):
        raise Http404("Arquivo n√£o encontrado")
    
    # Servir como arquivo est√°tico simples
    response = FileResponse(
        open(recording.file_path, 'rb'),
        content_type='video/mp4'
    )
    response['Content-Disposition'] = 'inline'
    
    return response


@login_required
def recording_delete(request, recording_id):
    """Excluir uma grava√ß√£o"""
    recording = get_object_or_404(Recording, id=recording_id, is_deleted=False)
    
    if request.method == 'POST':
        # Excluir arquivo f√≠sico
        if recording.delete_file():
            recording.is_deleted = True
            recording.save()
            messages.success(request, 'Grava√ß√£o exclu√≠da com sucesso!')
            return redirect('recordings:recording_list')
        else:
            messages.error(request, 'Erro ao excluir arquivo da grava√ß√£o.')
            return redirect('recordings:recording_list')
    
    messages.error(request, 'Grava√ß√£o n√£o encontrada.')
    return redirect('recordings:recording_list')


@login_required
def recording_bulk_delete(request):
    """Exclus√£o em lote de grava√ß√µes"""
    if request.method == 'POST':
        recording_ids = request.POST.getlist('recordings')
        days_old = request.POST.get('days_old')
        
        if recording_ids:
            # Excluir grava√ß√µes espec√≠ficas
            recordings = Recording.objects.filter(id__in=recording_ids, is_deleted=False)
        elif days_old:
            # Excluir grava√ß√µes mais antigas que X dias
            cutoff_date = timezone.now() - timedelta(days=int(days_old))
            recordings = Recording.objects.filter(
                start_time__lt=cutoff_date,
                is_deleted=False
            )
        else:
            messages.error(request, 'Nenhuma grava√ß√£o selecionada para exclus√£o.')
            return redirect('recordings:recording_list')
        
        deleted_count = 0
        for recording in recordings:
            if recording.delete_file():
                recording.is_deleted = True
                recording.save()
                deleted_count += 1
        
        messages.success(request, f'{deleted_count} grava√ß√µes exclu√≠das com sucesso!')
        return redirect('recordings:recording_list')
    
    return redirect('recordings:recording_list')


@login_required
def recording_settings(request):
    """Configura√ß√µes de grava√ß√£o"""
    settings_obj = RecordingSettings.get_settings()
    
    if request.method == 'POST':
        form = RecordingSettingsForm(request.POST, instance=settings_obj)
        if form.is_valid():
            form.save()
            messages.success(request, 'Configura√ß√µes de grava√ß√£o atualizadas!')
            return redirect('recordings:recording_settings')
    else:
        form = RecordingSettingsForm(instance=settings_obj)
    
    # Estat√≠sticas de armazenamento
    total_recordings = Recording.objects.filter(is_deleted=False).count()
    total_size = Recording.objects.filter(is_deleted=False).aggregate(
        total_size=Sum('file_size')
    )['total_size'] or 0
    total_size_gb = round(total_size / (1024**3), 2)
    
    context = {
        'form': form,
        'total_recordings': total_recordings,
        'total_size_gb': total_size_gb,
        'storage_limit_gb': settings_obj.storage_limit_gb,
    }
    
    return render(request, 'recordings/recording_settings.html', context)


@login_required
def motion_events(request):
    """Lista eventos de movimento"""
    events = MotionEvent.objects.all().order_by('-start_time')
    
    # Filtros
    camera_id = request.GET.get('camera')
    date_from = request.GET.get('date_from')
    date_to = request.GET.get('date_to')
    
    if camera_id:
        events = events.filter(camera_id=camera_id)
    
    if date_from:
        try:
            date_from = datetime.strptime(date_from, '%Y-%m-%d')
            events = events.filter(start_time__date__gte=date_from.date())
        except ValueError:
            pass
    
    if date_to:
        try:
            date_to = datetime.strptime(date_to, '%Y-%m-%d')
            events = events.filter(start_time__date__lte=date_to.date())
        except ValueError:
            pass
    
    # Pagina√ß√£o
    paginator = Paginator(events, 50)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'cameras': Camera.objects.filter(is_active=True),
    }
    
    return render(request, 'recordings/motion_events.html', context)


@login_required
def recording_statistics(request):
    """Estat√≠sticas de grava√ß√£o"""
    # Estat√≠sticas por c√¢mera
    camera_stats = []
    cameras = Camera.objects.filter(is_active=True)
    
    for camera in cameras:
        recordings = Recording.objects.filter(camera=camera, is_deleted=False)
        total_recordings = recordings.count()
        total_size = recordings.aggregate(total_size=Sum('file_size'))['total_size'] or 0
        total_size_gb = round(total_size / (1024**3), 2)
        
        # Grava√ß√µes dos √∫ltimos 7 dias
        week_ago = timezone.now() - timedelta(days=7)
        recent_recordings = recordings.filter(start_time__gte=week_ago).count()
        
        camera_stats.append({
            'camera': camera,
            'total_recordings': total_recordings,
            'total_size_gb': total_size_gb,
            'recent_recordings': recent_recordings,
        })
    
    # Estat√≠sticas por tipo de grava√ß√£o
    type_stats = Recording.objects.filter(is_deleted=False).values('recording_type').annotate(
        count=models.Count('id'),
        total_size=Sum('file_size')
    )
    
    # Estat√≠sticas por data (√∫ltimos 30 dias)
    date_stats = []
    for i in range(30):
        date = timezone.now().date() - timedelta(days=i)
        count = Recording.objects.filter(
            start_time__date=date,
            is_deleted=False
        ).count()
        
        date_stats.append({
            'date': date,
            'count': count,
        })
    
    date_stats.reverse()
    
    context = {
        'camera_stats': camera_stats,
        'type_stats': type_stats,
        'date_stats': date_stats,
    }
    
    return render(request, 'recordings/recording_statistics.html', context)


# API Views
@login_required
def api_recording_list(request):
    """API para listar grava√ß√µes"""
    recordings = Recording.objects.filter(is_deleted=False).order_by('-start_time')
    
    # Filtros
    camera_id = request.GET.get('camera')
    if camera_id:
        recordings = recordings.filter(camera_id=camera_id)
    
    data = []
    for recording in recordings[:50]:  # Limitar a 50 resultados
        data.append({
            'id': str(recording.id),
            'camera_name': recording.camera.name,
            'file_name': recording.file_name,
            'duration': recording.duration,
            'file_size_mb': recording.get_file_size_mb(),
            'recording_type': recording.recording_type,
            'start_time': recording.start_time.isoformat(),
            'motion_detected': recording.motion_detected,
        })
    
    return JsonResponse({'recordings': data})


@login_required
def api_recording_delete(request, recording_id):
    """API para excluir grava√ß√£o"""
    try:
        recording = Recording.objects.get(id=recording_id, is_deleted=False)
        
        if recording.delete_file():
            recording.is_deleted = True
            recording.save()
            return JsonResponse({'status': 'success'})
        else:
            return JsonResponse({'error': 'Erro ao excluir arquivo'}, status=500)
            
    except Recording.DoesNotExist:
        return JsonResponse({'error': 'Grava√ß√£o n√£o encontrada'}, status=404)


# Views de Convers√£o
@login_required
def recording_convert(request, recording_id):
    """Converte uma grava√ß√£o para H.264"""
    recording = get_object_or_404(Recording, id=recording_id, is_deleted=False)
    
    if request.method == 'POST':
        quality = request.POST.get('quality', 'medium')
        
        # Verificar se j√° foi convertido
        if recording.conversion_status == 'completed' and recording.converted_file_exists:
            messages.info(request, 'Esta grava√ß√£o j√° foi convertida.')
            return redirect('recordings:recording_detail', recording_id=recording_id)
        
        # Verificar se est√° sendo convertida
        if recording.conversion_status == 'converting':
            messages.warning(request, 'Esta grava√ß√£o est√° sendo convertida. Aguarde...')
            return redirect('recordings:recording_detail', recording_id=recording_id)
        
        # Iniciar convers√£o
        result = convert_recording(recording_id, quality)
        
        if result['success']:
            messages.success(request, f'Convers√£o iniciada com sucesso! Arquivo: {recording.converted_file_name}')
        else:
            messages.error(request, f'Erro na convers√£o: {result["error"]}')
        
        return redirect('recordings:recording_detail', recording_id=recording_id)
    
    # GET - mostrar formul√°rio de convers√£o
    context = {
        'recording': recording,
        'video_info': get_video_info(recording.file_path) if recording.file_exists else None,
    }
    
    return render(request, 'recordings/recording_convert.html', context)


@login_required
def recording_batch_convert(request):
    """Convers√£o em lote de grava√ß√µes"""
    if request.method == 'POST':
        recording_ids = request.POST.getlist('recordings')
        quality = request.POST.get('quality', 'medium')
        
        if not recording_ids:
            messages.error(request, 'Nenhuma grava√ß√£o selecionada para convers√£o.')
            return redirect('recordings:recording_list')
        
        # Filtrar grava√ß√µes que podem ser convertidas
        recordings = Recording.objects.filter(
            id__in=recording_ids,
            is_deleted=False,
            conversion_status__in=['pending', 'failed']
        )
        
        if not recordings:
            messages.warning(request, 'Nenhuma grava√ß√£o v√°lida encontrada para convers√£o.')
            return redirect('recordings:recording_list')
        
        # Iniciar convers√£o em lote
        result = batch_convert_recordings([str(r.id) for r in recordings], quality)
        
        if result['success'] > 0:
            messages.success(request, f'{result["success"]} grava√ß√µes convertidas com sucesso!')
        
        if result['failed'] > 0:
            messages.warning(request, f'{result["failed"]} grava√ß√µes falharam na convers√£o.')
        
        return redirect('recordings:recording_list')
    
    # GET - mostrar formul√°rio de convers√£o em lote
    recordings = Recording.objects.filter(
        is_deleted=False,
        conversion_status__in=['pending', 'failed']
    ).order_by('-start_time')
    
    context = {
        'recordings': recordings,
    }
    
    return render(request, 'recordings/recording_batch_convert.html', context)


@login_required
def recording_conversion_status(request, recording_id):
    """API para verificar status da convers√£o"""
    try:
        recording = Recording.objects.get(id=recording_id, is_deleted=False)
        
        return JsonResponse({
            'status': recording.conversion_status,
            'error': recording.conversion_error,
            'converted_file_exists': recording.converted_file_exists,
            'converted_file_name': recording.converted_file_name,
        })
        
    except Recording.DoesNotExist:
        return JsonResponse({'error': 'Grava√ß√£o n√£o encontrada'}, status=404)


@login_required
def recording_cleanup_converted(request):
    """Limpa arquivos convertidos √≥rf√£os"""
    if request.method == 'POST':
        cleaned_count = cleanup_converted_files()
        
        if cleaned_count > 0:
            messages.success(request, f'{cleaned_count} arquivos √≥rf√£os removidos.')
        else:
            messages.info(request, 'Nenhum arquivo √≥rf√£o encontrado.')
        
        return redirect('recordings:recording_settings')
    
    return redirect('recordings:recording_settings')


@login_required
def recording_conversion_queue(request):
    """Mostra fila de convers√£o"""
    # Grava√ß√µes pendentes de convers√£o
    pending_recordings = Recording.objects.filter(
        conversion_status='pending',
        is_deleted=False
    ).order_by('start_time')
    
    # Grava√ß√µes sendo convertidas
    converting_recordings = Recording.objects.filter(
        conversion_status='converting',
        is_deleted=False
    ).order_by('start_time')
    
    # Grava√ß√µes com erro na convers√£o
    failed_recordings = Recording.objects.filter(
        conversion_status='failed',
        is_deleted=False
    ).order_by('-start_time')
    
    # Grava√ß√µes convertidas recentemente
    recent_converted = Recording.objects.filter(
        conversion_status='completed',
        is_deleted=False
    ).order_by('-start_time')[:10]
    
    context = {
        'pending_recordings': pending_recordings,
        'converting_recordings': converting_recordings,
        'failed_recordings': failed_recordings,
        'recent_converted': recent_converted,
    }
    
    return render(request, 'recordings/recording_conversion_queue.html', context)


@login_required
def recording_play_test(request, recording_id):
    """P√°gina de teste do player de v√≠deo"""
    recording = get_object_or_404(Recording, id=recording_id, is_deleted=False)
    
    context = {
        'recording': recording,
    }
    
    return render(request, 'recordings/recording_play_test.html', context) 